Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Fn::Sub ${siteBucketName}.CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/service-role/'
      Policies:
      - PolicyName: codebuild-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVerion
            - s3:GetBucketVersioning
            - s3:PutObject
            Resource:
            - Fn::GetAtt PipelineBucket.Arn
            - Fn::Join ['', [Fn::GetAtt PipelineBucket.Arn, '/*']]
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            - s3:PutObject
            - s3:PutObjectAcl
            Resource:
            - Fn::GetAtt SiteBucket.Arn
            - Fn::Join ['', [Fn::GetAtt SiteBucket.Arn, '/*']]
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cloudfront:CreateInvalidation
            Resource: '*'
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Fn::Sub ${siteBucketName}.CodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/service-role/'
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:getObjectVersion
            - s3:GetBucketVersioning
            Resource:
            - Fn::GetAtt PipelineBucket.Arn
            - Fn::Join ['', [Fn::GetAtt PipelineBucket.Arn, '/*']]
          - Effect: Allow
            Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
          - Effect: Allow
            Action:
            - codebuild:BatchGetBuilds
            - codebuild:StartBuild
            Resource: '*'
          - Effect: Allow
            Action:
            - s3:*
            - cloudformation:*
            - iam:PassRole
            Resource: '*'
  SiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: PublicRead
      BucketName: Fn::Ref siteBucketName
      WebsiteConfiguration:
        IndexDocument: index.html
  PipelineBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: Fn::Sub ${siteBucketName}.Pipeline
  CodeBuildDeploySite:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Name: Fn::Sub ${siteBucketName}.DeploySite
      Description: Deploy site to S3
      ServiceRole: Fn::GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: Fn::Ref buildType
        ComputeType: Fn::Ref buildComputeType
        Image: Fn::Sub ${buildImage}
        EnvironmentVariables:
          - Name: ALGOLIA_APP_ID
            Value: Fn::Ref algoliaAppId
          - Name: ALGOLIA_SEARCH_ONLY_API_KEY
            Value: Fn::Ref algoliaSearchOnlyApiKey
          - Name: ALGOLIA_ADMIN_API_KEY
            Value: Fn::Ref algoliaAdminApiKey
          - Name: ALGOLIA_INDEX_NAME
            Value: Fn::Ref algoliaIndexName
      Source:
        Type: CODEPIPELINE
        BuildSpec: Fn::Sub |
        version: 0.2
        phases:
          pre_build:
            commands:
              - echo Installing source NPM dependencies...
              - npm install
              - echo Cleaning project...
              - npm run clean
          build:
            commands:
              - echo Build started on `date`
              - npm run build
          post_build:
            commands:
              - aws s3 sync --acl public-read public s3://${siteBucketName}/
              - aws s3 cp --acl public-read --cache-control='max-age=0, no-cache, no-store, must-revalidate' ./public/sw.js s3://${siteBucketName}/
              - aws s3 cp --acl public-read --cache-control='max-age=0, no-cache, no-store, must-revalidate' ./public/index.html s3://${siteBucketName}/
              - aws cloudfront create-invalidation --distribution-id ${Distribution} --paths /index.html /sw.js
        artifacts:
          files:
            - '**/*'
          base-directory: public
      TimeoutInMinutes: 10
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: Fn::Sub ${siteBucketName}.Pipeline
      RoleArn: Fn::GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - InputArtifacts: []
          Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: '1'
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceArtifacts
          Configuration:
            Owner: Fn::Ref gitHubOwner
            Repo: Fn::Ref gitHubRepo
            Branch: Fn::Ref gitHubBranch
            OAuthToken: Fn::Ref gitHubToken
          RunOrder: 1
      - Name: Deploy
        Actions:
        - Name: Artifact
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: '1'
            Provider: CodeBuild
          InputArtifacts:
          - Name: SourceArtifacts
          OutputArtifacts:
          - Name: DeploymentArtifacts
          Configuration:
            ProjectName: Fn::Ref CodeBuildDeploySite
          RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: Fn::Ref PipelineBucket
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - DomainName: Fn::GetAtt SiteBucket.DomainName
            Id: Fn::Ref siteBucketName
            S3OriginConfig:
              OriginAccessIdentity: ''
        Aliases:
        - CNAME: Fn::GetAtt SiteBucket.DomainName
          Quantity: 1
        HttpVersion: http2
        IsIPV6Enabled: true
        DefaultCacheBehavior:
          MinTTL: 86400
          MaxTTL: 31536000
          ForwardedValues:
            QueryString: true
          TargetOriginId: Fn::Ref siteBucketName
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: arn:aws:acm:us-east-1:096188391785:certificate/2ab36cf4-10d7-4a14-bb81-79b6555df0f8
  SiteDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Fn::Ref siteHostedZoneId
      RecordSets:
        - Name: Fn::GetAtt SiteBucket.DomainName
          Type: A
          AliasTarget:
            HostedZoneId: Z3GHCWB8V7K4G7
            DNSName: Fn::GetAtt Distribution.DistributionConfig.Origin.DomainName
        - Name: Fn::GetAtt SiteBucket.DomainName
          Type: AAAA
          AliasTarget:
            HostedZoneId: Z3GHCWB8V7K4G7
            DNSName: Fn::GetAtt Distribution.DistributionConfig.Origin.DomainName
        - Name: Fn::Join ['.', ['www', Fn::Ref siteHostedZoneId]]
          Type: CNAME
          TTL: '900'
          ResourceRecords:
            - Fn::GetAtt SiteBucket.DomainName
  ForceRemoveBucket:
    Type: Custom::cfnCliWrapper
    Properties:
      ServiceToken: arn:aws:lambda:us-east-1:096188391785:function:cli2cloudformation-dev
      CliCommandDelete: aws s3 rb s3://${siteBucketName} --force
